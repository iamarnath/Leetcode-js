/*
389. Find the Difference

Solution - https://leetcode.com/problems/find-the-difference/solutions/5174199/optimsed/

Description
You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"
 
Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.

*/
/*
The approach used in the provided code is to find the difference between the sum of character codes of the two input strings, s and t. Here's a step-by-step explanation of the approach:
The findTheDifference function takes two parameters: s (the source string) and t (the target string).
Inside the function, the [...t] syntax is used to convert the t string into an array of its characters.
 This is done for both t and s strings.
The reduce function is used to iterate over each character in the array and accumulate the sum of their character codes (using charCodeAt(0)). The initial value for the accumulator is set to 0.
After calculating the sum of character codes for both t and s, the difference between the two sums is calculated (targetSum - sourceSum). This difference represents the character code of the added letter in the t string.
Finally, the function returns the character represented by the calculated character code using String.fromCharCode(charCodeDiff).

Time Complexity:

The time complexity of this approach is O(n), where n is the length of the longer string between
 s and t. This is because the reduce function iterates over each character in the array, and the 
 array size is proportional to the length of the input string.

 Space Complexity:

The space complexity is O(n), where n is the length of the longer string between s and t. This is because the code creates two arrays, one for each input string, using the spread operator [...s] and [...t]. 
The size of these arrays is proportional to the length of the input strings.
*/
function findTheDifference(s, t) {
    // Convert the 'target' string into an array of its characters,
    // then use the 'reduce' function to accumulate the sum of the char codes.
    const targetSum = [...t].reduce((accumulator, currentValue) => {
        return accumulator + currentValue.charCodeAt(0)
    }, 0);
    const sourceSum = [...s].reduce((accumulator, currentValue) => {
        return accumulator + currentValue.charCodeAt(0)
    }, 0);
    // Find the difference in the accumulated char code sums between the 'target' and 'source' strings.
    // This difference is the char code of the added letter in the 'target' string.
    const charCodeDiff = targetSum - sourceSum;
    return String.fromCharCode(charCodeDiff);
}

s = "abcd", t = "abcde";
console.log(findTheDifference(s, t));